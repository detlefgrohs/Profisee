import os, json

from Profisee.Restful import API, Entity, Attribute
from Profisee.Common import Common
from Profisee.Restful.Enums import AttributeType, AttributeDataType


if os.path.exists(r"settings.json"):
    settings = json.load(open(r"settings.json"))
elif os.path.exists(r"Python/settings.json"):
    settings = json.load(open(r"Python/settings.json"))
elif os.path.exists(r"_Internal/settings.json"):
    settings = json.load(open(r"_Internal/settings.json"))
else:
    print("You must provide a settings.json file with the ProfiseeUrl, ClientId.")
    exit(1)

profisee_url = Common.Get(settings, "ProfiseeUrl", None)
client_id = Common.Get(settings, "ClientId", None)
verify_ssl = Common.Get(settings, "VerifySSL", True)

api = API(profisee_url, client_id, verify_ssl)

dbml_output = """// This file was generated by Profisee RESTful API
// From ...
"""

def add_to_dbml_output(line: str) -> None:
    global dbml_output
    dbml_output += line + "\n"

references = []

for entity in api.GetEntities():
    entity_name = Common.Get(entity, "Identifier.Name", "")

    if False or entity_name.startswith("FM_"): # in ('DQParent', 'DQChild', 'Core_YesNo'):

        add_to_dbml_output(f"Table \"{entity_name}\" {{")
        fields = {}
        
        for attribute in api.GetAttributes(entity_name):
            attribute_name = Common.Get(attribute, "Identifier.Name", "")
            attribute_data_type = Common.Get(attribute, "DataType", "")
            attribute_attribute_type = Common.Get(attribute, "AttributeType", "")
            attribute_data_type_information = Common.Get(attribute, "DataTypeInformation", "")
            attribute_domain_entity_name = Common.Get(attribute, "DomainEntityId.Name", "")
            attribute_sort_order = Common.Get(attribute, "SortOrder", 0)

            # print(f"  {attribute_sort_order} {attribute_name} : {attribute_data_type} {attribute_attribute_type} {attribute_data_type_information} {attribute_domain_entity_name} {{")

            field_info = f"  \"{attribute_name}\""
            
            if attribute_attribute_type == 2: # Domain
                field_info += " Text(250)"
                references.append(f"Ref: \"{attribute_domain_entity_name}\".Code < \"{entity_name}\".\"{attribute_name}\"")
            else:
                match(attribute_data_type):
                    case 1:
                        field_info += f" Text({attribute_data_type_information})"
                    case 2:
                        field_info += f" Number({attribute_data_type_information})"
                    case 3:
                        field_info += " DateTime"
                    case 4:
                        field_info += " Date"
                    case _:
                        field_info += f" Unknown({attribute_data_type_information})"
                        
            if attribute_name == "Code":
                field_info += " [primary key]" 
                        
            fields[attribute_sort_order] = field_info

        fields = dict(sorted(fields.items()))
        for field_info in fields.values():
            add_to_dbml_output(field_info)

        add_to_dbml_output("}\n")
        

add_to_dbml_output("")
for reference in references:
    add_to_dbml_output(reference)
    
print(dbml_output)

with open("workarea_generate_diagram.dbml", "w") as text_file:
    text_file.write(dbml_output)
    